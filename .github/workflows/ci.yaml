name: CI Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Check code formatting with Black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities in dependencies
      run: safety check --json || true
    
    - name: Run bandit security linter
      run: bandit -r project/ -f json || true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask pytest-mock
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -utest_user -ptest_password --silent; do
          sleep 1
        done
    
    - name: Run comprehensive API tests
      env:
        SECRET_KEY: test-secret-key-for-ci
        DATABASE_URL: sqlite:///test.db
        JWT_SECRET_KEY: test-jwt-secret-key
        FLASK_ENV: testing
      run: |
        # Run our comprehensive test suite
        pytest test_api_comprehensive.py -v --cov=project --cov-report=xml --cov-report=html --cov-report=term
        
        # Also run any other tests if they exist
        if [ -d "tests/" ]; then
          pytest tests/ -v --cov=project --cov-append --cov-report=xml --cov-report=html --cov-report=term
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.13'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: api-konsultasi:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Kill any existing processes on port 5000
        sudo lsof -ti:5000 | xargs -r sudo kill -9 || echo "No processes on port 5000"
        
        # Create a test environment file
        echo "SECRET_KEY=test-secret" > .env.test
        echo "DATABASE_URL=sqlite:///test.db" >> .env.test
        echo "JWT_SECRET_KEY=test-jwt-secret" >> .env.test
        
        # Find an available port (fallback to 5001 if 5000 is busy)
        PORT=5000
        if lsof -Pi :5000 -sTCP:LISTEN -t >/dev/null ; then
          PORT=5001
          echo "Port 5000 busy, using port $PORT"
        fi
        
        # Run the container in detached mode
        docker run -d --name test-container -p $PORT:5000 --env-file .env.test api-konsultasi:test
        
        # Wait for the container to start
        sleep 15
        
        # Test if the application is responding
        curl -f http://localhost:$PORT/api/v1/auth/health || echo "Health check endpoint not available"
        
        # Show container logs for debugging
        docker logs test-container
        
        # Clean up
        docker stop test-container || echo "Container already stopped"
        docker rm test-container || echo "Container already removed"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests pytest
    
    - name: Start application
      env:
        SECRET_KEY: test-secret-key-for-integration
        DATABASE_URL: mysql+pymysql://test_user:test_password@127.0.0.1:3306/test_db
        JWT_SECRET_KEY: test-jwt-secret-key
        FLASK_ENV: testing
      run: |
        # Kill any existing processes on port 5000
        sudo lsof -ti:5000 | xargs -r sudo kill -9 || echo "No processes on port 5000"
        
        # Start the application
        python run.py &
        APP_PID=$!
        echo "Started application with PID: $APP_PID"
        
        # Wait for application to start
        sleep 15
        
        # Check if application is running
        if curl -f http://localhost:5000/api/v1/auth/health; then
          echo "Application started successfully"
        else
          echo "Application failed to start, checking logs..."
          ps aux | grep python
        fi
    
    - name: Run integration tests
      run: |
        # Run our comprehensive API tests as integration tests
        pytest test_api_comprehensive.py -v
        
        # Run any additional integration tests if they exist
        if [ -d "tests/integration/" ]; then
          pytest tests/integration/ -v
        else
          echo "No additional integration tests found, using comprehensive API tests"
        fi

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, docker-build, integration-test]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "Build Summary:"
        echo "- Lint and Format: ${{ needs.lint-and-format.result }}"
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Docker Build: ${{ needs.docker-build.result }}"
        echo "- Integration Tests: ${{ needs.integration-test.result }}"
        
        if [[ "${{ needs.lint-and-format.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "❌ Build failed!"
          exit 1
        else
          echo "✅ Build successful!"
        fi
