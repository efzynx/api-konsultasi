name: Deploy to aaPanel

on:
  push:
    branches: [ main, dev ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

env:
  PYTHON_VERSION: '3.13'

jobs:
  deploy:
    name: Deploy to aaPanel Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine deployment environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "server_path=/www/wwwroot/api-konsultasi-prod" >> $GITHUB_OUTPUT
          echo "compose_file=compose.yaml" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "server_path=/www/wwwroot/api-konsultasi-dev" >> $GITHUB_OUTPUT
          echo "compose_file=compose.yaml" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.AAPANEL_SSH_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.AAPANEL_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to aaPanel Server
      env:
        HOST: ${{ secrets.AAPANEL_HOST }}
        USERNAME: ${{ secrets.AAPANEL_USERNAME }}
        SERVER_PATH: ${{ steps.env.outputs.server_path }}
        ENVIRONMENT: ${{ steps.env.outputs.environment }}
      run: |
        echo "🚀 Starting deployment to $ENVIRONMENT environment..."
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SERVER_PATH="${{ steps.env.outputs.server_path }}"
        ENVIRONMENT="${{ steps.env.outputs.environment }}"
        BRANCH="${{ github.ref_name }}"
        
        echo "📁 Setting up directory structure..."
        mkdir -p $SERVER_PATH
        cd $SERVER_PATH
        
        # Backup current deployment if exists
        if [ -d "current" ]; then
          echo "💾 Creating backup..."
          rm -rf backup || true
          mv current backup || true
        fi
        
        # Clone/update repository
        echo "📥 Fetching latest code from $BRANCH branch..."
        if [ -d ".git" ]; then
          git fetch origin
          git reset --hard origin/$BRANCH
        else
          git clone -b $BRANCH https://github.com/${{ github.repository }}.git current
          cd current
        fi
        
        # Copy current to working directory if we just cloned
        if [ ! -f "docker-compose.yml" ] && [ ! -f "compose.yaml" ]; then
          cd ..
          cp -r current/* ./ || true
          cp -r current/.* ./ 2>/dev/null || true
        fi
        
        echo "🔧 Setting up environment configuration..."
        
        # Create environment file based on deployment environment
        if [ "$ENVIRONMENT" = "production" ]; then
          cat > .env << ENVEOF
        SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
        DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
        JWT_SECRET_KEY=${{ secrets.PROD_JWT_SECRET_KEY }}
        MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}
        MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
        FLASK_ENV=production
        ENVEOF
        else
          cat > .env << ENVEOF
        SECRET_KEY=${{ secrets.DEV_SECRET_KEY }}
        DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
        JWT_SECRET_KEY=${{ secrets.DEV_JWT_SECRET_KEY }}
        MYSQL_ROOT_PASSWORD=${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE=${{ secrets.DEV_MYSQL_DATABASE }}
        MYSQL_USER=${{ secrets.DEV_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}
        FLASK_ENV=development
        ENVEOF
        fi
        
        echo "🐳 Building and deploying with Docker..."
        
        # Stop existing containers
        docker compose down || docker-compose down || true
        
        # Remove old images to free space
        docker image prune -f || true
        
        # Build and start new containers
        docker compose up -d --build || docker-compose up -d --build
        
        # Wait for services to be ready
        echo "⏳ Waiting for services to start..."
        sleep 30
        
        # Health check
        echo "🏥 Performing health check..."
        if curl -f http://localhost:5000/api/v1/auth/health 2>/dev/null; then
          echo "✅ Health check passed!"
        else
          echo "⚠️  Health check failed, but deployment completed. Check logs manually."
        fi
        
        # Show running containers
        echo "📊 Current running containers:"
        docker ps
        
        echo "🎉 Deployment to $ENVIRONMENT completed successfully!"
        EOF
        
        # Make script executable and run it
        chmod +x deploy.sh
        
        # Copy script to server and execute
        scp deploy.sh $USERNAME@$HOST:/tmp/deploy-${{ github.run_id }}.sh
        
        ssh $USERNAME@$HOST "bash /tmp/deploy-${{ github.run_id }}.sh && rm /tmp/deploy-${{ github.run_id }}.sh"
    
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment to ${{ steps.env.outputs.environment }} completed successfully!"
          echo "🌐 Application should be available at your aaPanel server"
        else
          echo "❌ Deployment to ${{ steps.env.outputs.environment }} failed!"
          echo "Please check the logs and server status"
        fi

  post-deploy-test:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Determine server URL
      id: url
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "server_url=${{ secrets.PROD_SERVER_URL }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "server_url=${{ secrets.DEV_SERVER_URL }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Run post-deployment tests
      env:
        SERVER_URL: ${{ steps.url.outputs.server_url }}
      run: |
        echo "🧪 Running post-deployment tests against $SERVER_URL"
        
        # Wait a bit more for services to fully start
        sleep 60
        
        # Basic connectivity test
        if curl -f $SERVER_URL/api/v1/auth/health; then
          echo "✅ Server is responding"
        else
          echo "❌ Server health check failed"
          exit 1
        fi
        
        # You can add more specific API tests here
        echo "🎯 Running basic API tests..."
        
        # Test registration endpoint
        curl -X POST $SERVER_URL/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"test_deploy","password":"test123","nama":"Test Deploy","nim":"123456789"}' \
          || echo "Registration test completed (may fail if user exists)"
        
        echo "✅ Post-deployment tests completed"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-test]
    if: failure()
    
    steps:
    - name: Setup SSH for rollback
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.AAPANEL_SSH_KEY }}
    
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.AAPANEL_HOST }} >> ~/.ssh/known_hosts
    
    - name: Rollback deployment
      env:
        HOST: ${{ secrets.AAPANEL_HOST }}
        USERNAME: ${{ secrets.AAPANEL_USERNAME }}
      run: |
        echo "🔄 Rolling back deployment..."
        
        # Determine server path based on branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          SERVER_PATH="/www/wwwroot/api-konsultasi-prod"
        else
          SERVER_PATH="/www/wwwroot/api-konsultasi-dev"
        fi
        
        ssh $USERNAME@$HOST << EOF
        cd $SERVER_PATH
        
        # Stop current containers
        docker compose down || docker-compose down || true
        
        # Restore backup if exists
        if [ -d "backup" ]; then
          echo "📦 Restoring from backup..."
          rm -rf current || true
          mv backup current
          cd current
          
          # Start backup version
          docker compose up -d || docker-compose up -d || true
          echo "✅ Rollback completed"
        else
          echo "⚠️  No backup found, manual intervention required"
        fi
        EOF
        
        echo "🔄 Rollback process completed"
